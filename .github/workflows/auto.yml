name: Automation Build and Release

on:
  push:
    branches:
      - buid_yml
  pull_request:
    branches:
      - master

jobs:
  test:
    name: Automation test
    runs-on: macos-latest

    steps:
      - name: Checkout automation code
        uses: actions/checkout@v4

      # - name: Install and Run Appium Server
      #   uses: moatazeldebsy/appium-server-gitHub-action@V1.0.4

      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: "17"
      #     distribution: "temurin"

      # - name: Setup Android SDK
      #   uses: android-actions/setup-android@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Create and activate venv
        run: |
          python3.9 -m venv venv
          source venv/bin/activate

      # - name: Install frameworks and tools
      #   run: |
      #     npm i --location=global appium
      #     appium driver install uiautomator2
      #     sudo apt-get update
      #     sudo apt-get install -y android-sdk-platform-tools
      #     sudo apt install openjdk-11-jdk
      #     sudo apt-get install -y libpulse0

      # - name: Set up environment variables
      #   run: |
      #     echo 'export ANDROID_HOME=~/Library/Android/sdk' >> $HOME/.bashrc
      #     echo 'export JAVA_HOME=/usr/lib/jvm/openjdk-11' >> $HOME/.bashrc
      #     echo 'export PATH=$PATH:$ANDROID_HOME/tools/bin' >> $HOME/.bashrc
      #     echo 'export PATH=$PATH:$ANDROID_HOME/platform-tools' >> $HOME/.bashrc
      #     echo 'export PATH=$PATH:/usr/local/lib/android/sdk/platform-tools' >> $HOME/.bashrc
      #     source $HOME/.bashrc

      # - name: Install Android SDK components
      #   run: $ANDROID_HOME/tools/bin/sdkmanager --install "platform-tools" "emulator"

      # - name: Find adb location
      #   run: find / -name adb 2>/dev/null
      #   id: adb-location

      # - name: Add adb to PATH
      #   run: |
      #     echo "export PATH=$PATH:${{ steps.adb-location.outputs.stdout }}" >> $GITHUB_ENV

      # - name: adb version
      #   run: adb version

      - name: Set up Android SDK
        run: |
          curl -o sdk-tools-linux.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
          unzip -q sdk-tools-linux.zip -d android-sdk
          echo 'export ANDROID_HOME=$PWD/android-sdk' >> $GITHUB_ENV
          echo 'export PATH=$PATH:$ANDROID_HOME/tools' >> $GITHUB_ENV
          echo 'export PATH=$PATH:$ANDROID_HOME/platform-tools' >> $GITHUB_ENV

      - name: Update Android SDK
        run: $ANDROID_HOME/tools/bin/sdkmanager --update

      - name: Accept Android licenses
        run: yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses

      - name: Verify adb installation
        run: export PATH="$PATH:$ANDROID_HOME/platform-tools" && adb version && adb devices

      # - name: Install dependencies
      #   run: pip install -r requirements.txt

      # - name: Checkout application code
      #   uses: actions/checkout@v4
      #   with:
      #     repository: huynhlan21/test
      #     ref: build
      #     path: App

      # - name: Download APK file
      #   run: |
      #     wget -O application.apk https://expo.dev/artifacts/eas/jhDba2fHiueUkaChYeSu2s.apk
      #     mkdir -p App
      #     mv application.apk App/

      # - name: Create emulator
      #   run: |
      #     echo "y" | $ANDROID_HOME/tools/bin/sdkmanager "system-images;android-29;google_apis;x86"
      #     echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd --name test_emulator --package 'system-images;android-29;google_apis;x86' --abi google_apis/x86 --device "pixel"
      #     export PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$PATH"
      #   if: steps.list_avds.outputs.stdout != 'test_emulator'

      # - name: Set up KVM permissions
      #   run: |
      #     cat /etc/group | grep kvm || sudo groupadd -r kvm
      #     sudo sed -i '/KERNEL=="kvm", GROUP="kvm", MODE="0660"/!b;n;cKERNEL=="kvm", GROUP="kvm", MODE="0660"' /lib/udev/rules.d/50-udev-default.rules

      # - name: Verify KVM Permissions
      #   run: |
      #     sudo sed -i 's/^kvm:x:[0-9]\+$/&:huynhlan21/' /etc/group
      #     sudo groupadd -r kvm
      #     sudo gpasswd -a huynhlan21 kvm
      #     sudo su - huynhlan21

      # - name: Configure KVM Permissions
      #   run: |
      #     echo 'KERNEL=="kvm", GROUP="kvm", MODE="0660"' >> /lib/udev/rules.d/50-udev-default.rules

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            cd App
            adb install -r application.apk
            adb shell am instrument -w -r -e debug false com.example.test/androidx.test.runner.AndroidJUnitRunner

      - name: Check emulator setup status
        run: |
          if [ ${{ steps.emulator.outputs.setup-success }} != 'true' ]; then
            echo "Emulator setup failed. Skipping remaining steps."
            exit 0
          fi

      - name: Wait for the emulator to start
        run: |
          emulator_ready=false
          while [ "$emulator_ready" != "true" ]; do
            output=$(adb devices)
            if echo "$output" | grep -q "emulator-"; then
              emulator_ready=true
            fi
            sleep 2
          done

      - name: Connect to the emulator
        run: adb connect emulator-5554

      - name: Check connected devices
        run: adb devices

      - name: Run Robot Framework tests
        run: |
          robot -d Reports --loglevel TRACE UiTests/TestSuite.robot

      - name: Archive test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Robot Framework Reports
          path: Reports

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: Robot Framework Results
          path: Reports/output.xml

      - name: Print emulator logs
        run: adb logcat -d

      - name: Terminate emulator
        run: adb -s emulator-5554 emu kill

      - name: Print emulator logs after termination
        run: adb logcat -d

      - name: Deactivate and remove virtual environment
        run: |
          deactivate
          rm -rf venv

  debug:
    needs: test
    runs-on: macos-latest
    steps:
      - name: Debug information
        run: |
          echo "Emulator setup success: ${{ needs.test.outputs.emulator.outputs.setup-success }}"
          echo "Emulator setup output: ${{ needs.test.outputs.emulator.outputs.emulator-setup-output }}"
          echo "Emulator logs:"
          adb logcat -d
