name: Automation Build and Release

on:
  push:
    branches:
      - buid_yml
  pull_request:
    branches:
      - master

jobs:
  test:
    name: iOS Automation Test for OS Version ${{ vars.IOS_FIRST_SIM_OS }}
    runs-on: macos-13

    steps:
      # - name: Set up Homebrew
      #   uses: Homebrew/actions/setup-homebrew@master

      # - name: Set up Xcode
      #   run: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

      # - name: Verify Xcode Installation
      #   run: xcodebuild -version -sdk

      # - name: Check Available Simulators
      #   run: xcrun simctl list devices

      - name: Environment Set Up
        uses: actions/test-autotests@v1
        with:
          env-set-up: "test"

      - name: Set up First iOS Simulator
        id: setup-first-simulator
        uses: futureware-tech/simulator-action@v3
        with:
          model: "iPhone 14"
          os_version: 16.4

      - name: Shutdown First iOS Simulator
        run: xcrun simctl shutdown "${{ steps.setup-first-simulator.outputs.udid }}"

      - name: Check Available Simulators
        run: xcrun simctl list devices

      - name: Set up Second iOS Simulator
        id: setup-second-simulator
        uses: futureware-tech/simulator-action@v3
        with:
          model: "iPhone 14 Plus"
          os_version: 17.0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ vars.PYTHON_VERSION }}

      - name: Install Frameworks and Tools
        run: |
          npm i --location=global appium
          appium driver install xcuitest

      - name: Checkout Automation Code
        uses: actions/checkout@v4

      - name: Modify iOS UDID
        run: |
          echo "IOS_FIRST_DEVICE_UDID=${{ steps.setup-first-simulator.outputs.udid }}" >> $GITHUB_ENV
          echo "IOS_SECOND_DEVICE_UDID=${{ steps.setup-second-simulator.outputs.udid }}" >> $GITHUB_ENV
          python3 - <<EOF
          file_path = 'Resources/Locators/CommonLocators.robot'
          read_file = open(file_path, 'r')
          file_content = read_file.read()
          modify_content = file_content.replace("first_device_udid", "${{ env.IOS_FIRST_DEVICE_UDID}}")
          modify_content = file_content.replace("second_device_udid", "${{ env.IOS_SECOND_DEVICE_UDID}}")
          read_file.close()
          modify_file = open(file_path, 'w')
          modify_file.write(modify_content)
          modify_file.close()
          exit()
          EOF

      - name: Create and Activate Venv
        run: |
          python3.9 -m venv venv
          source venv/bin/activate

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Download and Extract iOS Build
        run: |
          wget -O ios_build.tar.gz ${{ vars.IOS_BUILD_URL }}
          mkdir -p App
          mv ios_build.tar.gz App/
          cd App
          tar -xzf ios_build.tar.gz

      - name: Start Appium Server
        run: appium &

      - name: Run and Test on iOS Simulator
        run: |
          xcrun simctl install "${{ env.IOS_FIRST_DEVICE_UDID }}" "App/test.app"
          xcrun simctl launch "${{env.IOS_FIRST_DEVICE_UDID }}" ${{ vars.IOS_BUNDLE_IDENTIFIER }}
          xcrun simctl install "${{ env.IOS_SECOND_DEVICE_UDID }}" "App/test.app"
          xcrun simctl launch "${{env.IOS_SECOND_DEVICE_UDID }}" ${{ vars.IOS_BUNDLE_IDENTIFIER }}
          robot -d Reports --loglevel TRACE UiTests

      - name: Archive Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: iOS Automation Reports
          path: Reports

      - name: Stop Appium Server
        run: pkill -f appium

      - name: Clean up
        run: |
          ls {.,App}
          rm -rf /tmp/appium*
          rm -f App/ios_build.tar.gz
          rm -rf App/test.app
          rm -rf venv
