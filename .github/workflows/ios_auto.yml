name: Automation Build and Release

on:
  push:
    branches:
      - buid_yml
  pull_request:
    branches:
      - master

jobs:
  test:
    name: iOS Automation Test
    runs-on: macos-latest
    env:
      IOS_VERSION: 16.2
      IOS_UDID: "6E16567A-DE1B-4B4E-A1A0-F5FBD6B720B1"

    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Set up Xcode
        run: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

      - name: Verify Xcode installation
        run: xcodebuild -version -sdk

      - name: Set up iOS simulator
        uses: futureware-tech/simulator-action@v3
        with:
          model: "${{ vars.IOS_DEVICE }}"

      # - name: Get device information
      #   id: device-info
      #   run: |
      #     DEVICE_INFO=$(xcrun simctl list --json devices available)
      #     echo "Device Info: $DEVICE_INFO"
      #     DEVICE_VERSION=$(echo "$DEVICE_INFO" | jq -r '.devices | to_entries[] | select(.key | contains("iOS")) | .value[] | select(.model == "${{ vars.IOS_DEVICE }}") | .name')
      #     UDID=$(echo "$DEVICE_INFO" | jq -r '.devices | to_entries[] | select(.key | contains("iOS")) | .value[] | select(.model == "${{ vars.IOS_DEVICE }}") | .udid')

      #     if [[ -z "$DEVICE_VERSION" ]]; then
      #       echo "Unable to find device version."
      #       exit 1
      #     fi

      #     if [[ -z "$UDID" ]]; then
      #       echo "Unable to find device UDID."
      #       exit 1
      #     fi

      #     echo "Device Version: $DEVICE_VERSION"
      #     echo "UDID: $UDID"

      #   env:
      #     DEVICE_VERSION: ${{ steps.device-info.outputs.device_version }}
      #     UDID: ${{ steps.device-info.outputs.udid }}

      # - name: Set device version and UDID as environment variables
      #   run: |
      #     echo "DEVICE_VERSION=${DEVICE_VERSION}" >> $GITHUB_ENV
      #     echo "UDID=${UDID}" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install frameworks and tools
        run: |
          npm i --location=global appium
          appium driver install xcuitest

      - name: Checkout Automation Code
        uses: actions/checkout@v4

      - name: Create and Activate Venv
        run: |
          python3.9 -m venv venv
          source venv/bin/activate

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Download and Extract iOS Build
        run: |
          wget -O ios_build.tar.gz ${{ vars.IOS_BUILD_URL }}
          mkdir -p App
          mv ios_build.tar.gz App/
          cd App
          tar -xzf ios_build.tar.gz

      - name: Start Appium Server
        run: appium &

      - name: Run on iOS Simulator
        run: |
          xcrun simctl install "${{ vars.IOS_DEVICE }}" "App/test.app"
          xcrun simctl launch "${{ vars.IOS_DEVICE }}" "${{ vars.IOS_BUNDLE_IDENTIFIER }}"
          appium --platformName "iOS" --deviceName "${{ vars.IOS_DEVICE }}" --udid "${{ env.IOS_UDID }}" --bundleId "${{ vars.IOS_BUNDLE_IDENTIFIER }}" --platformVersion "${{ env.IOS_VERSION }}" --automationName "XCUITest" --app "http://127.0.0.1:4723"
          robot -d Reports --loglevel TRACE UiTests/TestSuite.robot

      - name: Archive Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: iOS Automation Reports
          path: Reports

      - name: Stop Appium Server
        run: pkill -f appium

      - name: Clean up
        run: |
          ls {.,App}
          rm -rf /tmp/appium*
          rm -f App/ios_build.tar.gz
          rm -rf App/test.app
          rm -rf venv
